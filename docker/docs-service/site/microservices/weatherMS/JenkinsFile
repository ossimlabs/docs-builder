node(""){
    def workspaceDir = pwd()
    def appName = "build"
    def microservice_name = "${env.MICROSERVICE}"

    stage( "Clean Workspace" ) {
        if ( "${CLEAN_WORKSPACE}" == "true" )
            step([ $class: 'WsCleanup' ])
    }
    
    stage("Checkout"){
        dir(appName) {
            git branch: "${BITBUCKET_BRANCH}", credentialsId: "${env.BITBUCKET_CREDS}", url: "${BITBUCKET_URL}/${appName}.git"
            sh '''
                echo Execute Clone Repo Script - Downloads ALL dependencies
                chmod +x clone.sh
                ./clone.sh
                echo CHECKOUT STAGE complete!
                '''
        }
    }
    
    try {
      stage ("Gradle Build")
      {
      dir(appName) {
        sh """
            echo ${microservice_name}
            pwd
            ls -ltr
            echo Building...
            source ~/.bash_profile
            gradle clean :${microservice_name}:build -x test
        """
        }
      }
    }
    catch(e){
        echo e.toString()
        currentBuild.result = "FAILED"
    }

    try {
     stage('Fortify Analysis') {
     dir (appName){
         sh """
            export PATH=${PATH}:/opt/Fortify/Fortify_SCA_and_Apps_18.20/bin
            sourceanalyzer -64 -b ${microservice_name} -clean
            sourceanalyzer -64 -b ${microservice_name} -source "1.8" -verbose -cp "${workspaceDir}/build/**/*.class" "${workspaceDir}/build/microservices/${microservice_name}/src/**/*.java"
            sourceanalyzer -64 -b ${microservice_name} -scan -Xmx4G -f fortifyResults-${microservice_name}.fpr
            ReportGenerator -format pdf -f fortifyResults-${microservice_name}.pdf -source fortifyResults-${microservice_name}.fpr
            fortifyclient -url http://10.0.0.192:8080/ssc -authtoken 6121222a-db20-4181-a897-0d0bfe0a4793 uploadFPR -file fortifyResults-${microservice_name}.fpr -applicationVersionID ${VERSION_ID}
           """
             }
        }
    }
    catch(e){
        echo e.toString()
        currentBuild.result = "FAILED"
    }

    try {
     stage('SCP Build Artifact') {
            echo 'Transferring the build WAR file to a Test Server for deployment'
            sh """
            cd ${workspaceDir}
		    scp -i ~/.ssh/id_rsa build/microservices/${microservice_name}/build/libs/${microservice_name}.war pk-jenkins@10.0.0.141:/home/pk-jenkins/copiedWARS
            echo '${microservice_name} war file transferred}'
			scp -i ~/.ssh/id_rsa build/deployWar.sh pk-jenkins@10.0.0.141:/home/pk-jenkins/scripts/
            echo 'CM controlled deploy script transferred'
            """
        }
    }
    catch(e){
        echo e.toString()
        currentBuild.result = "FAILED"
    }
  
     try {
      stage('Deploy Build Artifact') {
            echo 'Deploying WAR...'
            sh """
			ssh -i ~/.ssh/id_rsa pk-jenkins@10.0.0.141 "sh /home/pk-jenkins/scripts/deployWar.sh ${microservice_name}"
			"""
        }
    }
    catch(e){
        echo e.toString()
        currentBuild.result = "FAILED"
    }
}