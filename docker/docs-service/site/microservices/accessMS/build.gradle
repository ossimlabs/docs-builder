plugins {
    id 'org.springframework.boot'
    id 'war'
    id "org.sonarqube" version "2.7"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

description = 'AccessMS'

bootWar.archiveName = name + '.war'
bootJar.archiveFileName = name + '.jar'

publish.dependsOn bootJar

sonarqube {
    properties {
        property "sonar.projectName", "accessMS"
        property "sonar.projectKey", "accessMS"
        property "sonar.host.url", "http://10.0.0.224:9000"
        property "sonar.login", "f5fdae9da549e7be4ec273c01e54aa388b5f946e"
    }
}
jacoco{
        toolVersion = "0.8.4"
}

jacocoTestReport{
        reports{
                html.enabled = true
                xml.enabled =  true
                csv.enabled =  false
        }
}

dependencyManagement {
    imports {
        mavenBom ('org.springframework.cloud:spring-cloud-dependencies:Greenwich.RELEASE') {
            bomProperty 'hystrix.version', '1.4.3'
            bomProperty 'spring-boot.version', "$springboot_version"
            bomProperty 'spring-cloud-commons.version', "$springcloud_version"
            bomProperty 'spring-cloud-config.version', "$springcloud_version"
            bomProperty 'spring-cloud-netflix.version', "$springcloud_version"

            dependencies {
                dependency 'com.netflix.netflix-commons:netflix-commons-util:0.1.1'
            }
        }

        mavenBom ("org.springframework.boot:spring-boot-dependencies:$springboot_version") {
            bomProperty 'commons-codec.version', '1.10'
            bomProperty 'guava', "20.0"
            bomProperty 'httpclient.version', '4.5.4'
            bomProperty 'httpcore.version', '4.4.7'
            bomProperty 'jackson.version', "$jackson_version"
            bomProperty 'joda-time.version', "$jodatime_version"
            bomProperty 'micrometer.version', '1.1.3'

            dependencies {
                dependency 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.6.7'
                dependency 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.9.8'
                dependency 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.8'
                dependency 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.8'
                dependency 'com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.9.8'
                dependency 'com.fasterxml.jackson.module:jackson-module-parameter-names:2.9.8'
                dependency "com.google.guava:guava:20.0"
                dependency 'org.springframework:spring-context-support:5.1.5.RELEASE'
                dependency 'org.springframework.boot:spring-boot-actuator:2.1.3.RELEASE'
                dependency 'org.springframework.boot:spring-boot-actuator-autoconfigure:2.1.3.RELEASE'
                dependency 'org.springframework.boot:spring-boot-starter-actuator:2.1.3.RELEASE'
                dependency 'org.springframework.boot:spring-boot-starter-freemarker:2.1.3.RELEASE'
                dependency 'org.springframework.security:spring-security-crypto:5.1.4.RELEASE'
            }
        }

        mavenBom ("org.glassfish.jaxb:jaxb-bom:$jaxb_version") {
            dependencies {
                dependency 'com.sun.xml.bind:jaxb-impl:2.2'
                dependency 'com.sun.xml.bind:jaxb-xjc:2.2'
            }
        }
    }
}

dependencies {
    if (kelly_projects) {
        implementation project(':accessCommon')
        implementation project(':accessModel')
        implementation project(':assetCommon')
        implementation project(':weatherModel')

        testImplementation project(':terrainModel')
    }
    else {
        implementation 'com.maxar:accessCommon:0.0.2-RELEASE-c4456fe'
        implementation 'com.maxar:accessModel:0.0.2-RELEASE-4cacd0f'
        implementation 'com.maxar:assetCommon:0.0.1-RELEASE-f9205b0'
        implementation 'com.maxar:weatherModel:0.0.2-RELEASE-4cacd0f'

        testImplementation 'com.maxar:terrainModel:0.0.1-RELEASE-718290f'
    }

    implementation "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jackson_version"
    implementation "com.fasterxml.jackson.module:jackson-module-paranamer:$jackson_version"
    implementation "com.fasterxml.jackson.module:jackson-module-scala_2.12:$jackson_version"
    implementation "joda-time:joda-time:$jodatime_version"
    implementation "org.apache.commons:commons-lang3:$apachecommonslang_version"
    implementation('org.reflections:reflections:0.9.8') {
        exclude group: 'com.google.guava', module:'guava'
        exclude group: 'javassist', module: 'javassist'
        implementation 'xml-apis:xml-apis:1.0.b2'
    }
    implementation "org.slf4j:slf4j-log4j12:$log4j_version"
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.springframework.cloud:spring-cloud-starter-config:$springcloud_version"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:$springcloud_version"
    // Required to allow reflections to work, not sure why
    implementation "org.hibernate:hibernate-core:$hibernate_version"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    compileOnly "org.projectlombok:lombok:$lombok_version"
    annotationProcessor "org.projectlombok:lombok:$lombok_version"

    configurations {
        compile.exclude group: 'ch.qos.logback'
    }

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'net.bytebuddy:byte-buddy-agent:1.9.3'
    testCompile "junit:junit:$junit_version"
}
test.finalizedBy jacocoTestReport