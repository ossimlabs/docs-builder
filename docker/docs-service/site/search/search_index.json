{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"KTIS KTIS does good things. Module Links accessMS guide swagger missionRepository guide weatherRepository guide planningMS guide alertPollService guide alertService guide copDM guide configService guide ephemerisRepository guide missionModel guide assetCommon guide alertModel guide accessCommon guide discoveryService guide assetRepository guide opGenCommon guide geometricIntersectionMS guide weatherDM guide workflowModel guide managerMS guide geometricIntersectionModel guide userRepository guide ephemerisMS guide targetRepository guide terrainMS guide geometricIntersectionRepository guide targetModel guide terrainModel guide userService guide commonMS guide planningModel guide swaggerCommon guide weatherParser guide workflowMS guide assetModel guide targetMS guide opGenService guide ephemerisModel guide airborneAccessMS guide alertRepository guide assetMS guide userModel guide opGenModel guide weatherModel guide geometryIngestService guide weatherMS guide microserviceDBUtils guide planningRepository guide missionMS guide ephemerisDM guide initDatabase guide accessModel guide build repo guide czmlwriter guide cesium-client guide csv2czml guide cesium-server guide webstats guide","title":"Home"},{"location":"#ktis","text":"KTIS does good things.","title":"KTIS"},{"location":"#module-links","text":"accessMS guide swagger missionRepository guide weatherRepository guide planningMS guide alertPollService guide alertService guide copDM guide configService guide ephemerisRepository guide missionModel guide assetCommon guide alertModel guide accessCommon guide discoveryService guide assetRepository guide opGenCommon guide geometricIntersectionMS guide weatherDM guide workflowModel guide managerMS guide geometricIntersectionModel guide userRepository guide ephemerisMS guide targetRepository guide terrainMS guide geometricIntersectionRepository guide targetModel guide terrainModel guide userService guide commonMS guide planningModel guide swaggerCommon guide weatherParser guide workflowMS guide assetModel guide targetMS guide opGenService guide ephemerisModel guide airborneAccessMS guide alertRepository guide assetMS guide userModel guide opGenModel guide weatherModel guide geometryIngestService guide weatherMS guide microserviceDBUtils guide planningRepository guide missionMS guide ephemerisDM guide initDatabase guide accessModel guide build repo guide czmlwriter guide cesium-client guide csv2czml guide cesium-server guide webstats guide","title":"Module Links"},{"location":"accessCommon-guide/","text":"accessCommon Docs","title":"accessCommon"},{"location":"accessCommon-guide/#accesscommon-docs","text":"","title":"accessCommon Docs"},{"location":"accessMS-guide/","text":"accessMS Docs Dockerfile FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=accessMS.jar # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"accessMS"},{"location":"accessMS-guide/#accessms-docs","text":"","title":"accessMS Docs"},{"location":"accessMS-guide/#dockerfile","text":"FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=accessMS.jar # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"Dockerfile"},{"location":"accessModel-guide/","text":"accessModel Docs","title":"accessModel"},{"location":"accessModel-guide/#accessmodel-docs","text":"","title":"accessModel Docs"},{"location":"airborneAccessMS-guide/","text":"airborneAccessMS Docs Dockerfile FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=airborneAccessMS.war # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"airborneAccessMS"},{"location":"airborneAccessMS-guide/#airborneaccessms-docs","text":"","title":"airborneAccessMS Docs"},{"location":"airborneAccessMS-guide/#dockerfile","text":"FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=airborneAccessMS.war # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"Dockerfile"},{"location":"alertModel-guide/","text":"alertModel Docs","title":"alertModel"},{"location":"alertModel-guide/#alertmodel-docs","text":"","title":"alertModel Docs"},{"location":"alertPollService-guide/","text":"alertPollService Docs Dockerfile FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=alertPollService.war # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"alertPollService"},{"location":"alertPollService-guide/#alertpollservice-docs","text":"","title":"alertPollService Docs"},{"location":"alertPollService-guide/#dockerfile","text":"FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=alertPollService.war # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"Dockerfile"},{"location":"alertRepository-guide/","text":"alertRepository Docs","title":"alertRepository"},{"location":"alertRepository-guide/#alertrepository-docs","text":"","title":"alertRepository Docs"},{"location":"alertService-guide/","text":"alertService Docs Dockerfile FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=alertService.war # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"alertService"},{"location":"alertService-guide/#alertservice-docs","text":"","title":"alertService Docs"},{"location":"alertService-guide/#dockerfile","text":"FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=alertService.war # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"Dockerfile"},{"location":"assetCommon-guide/","text":"assetCommon Docs","title":"assetCommon"},{"location":"assetCommon-guide/#assetcommon-docs","text":"","title":"assetCommon Docs"},{"location":"assetMS-guide/","text":"assetMS Docs Dockerfile FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=assetMS.jar # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"assetMS"},{"location":"assetMS-guide/#assetms-docs","text":"","title":"assetMS Docs"},{"location":"assetMS-guide/#dockerfile","text":"FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=assetMS.jar # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"Dockerfile"},{"location":"assetModel-guide/","text":"assetModel Docs","title":"assetModel"},{"location":"assetModel-guide/#assetmodel-docs","text":"","title":"assetModel Docs"},{"location":"assetRepository-guide/","text":"assetRepository Docs","title":"assetRepository"},{"location":"assetRepository-guide/#assetrepository-docs","text":"","title":"assetRepository Docs"},{"location":"build-repo-guide/","text":"build repo Docs docker/README.md This folder contains the resources for generating a ktis builder image. Build the image using: docker build -t ktis-builder . Create an output directory for the built jars to be placed, and run the container with the following command (filling in build_repo_directory and output_directory as needed): docker run --rm -it -v \"{{ build_repo_directory }}:/build\" -v \"{{ output_directory }}:/output\" ktis-builder Jenkinsfile node(\"\"){ def workspaceDir = pwd() def appName = \"build\" def microservice_name = \"${env.MICROSERVICE}\" stage( \"Clean Workspace\" ) { if ( \"${CLEAN_WORKSPACE}\" == \"true\" ) step([ $class: 'WsCleanup' ]) } stage(\"Checkout\"){ dir(appName) { git branch: \"${BITBUCKET_BRANCH}\", credentialsId: \"${env.BITBUCKET_CREDS}\", url: \"${BITBUCKET_URL}/${appName}.git\" sh ''' echo Execute Clone Repo Script - Downloads ALL dependencies chmod +x clone.sh ./clone.sh echo CHECKOUT STAGE complete! ''' } } try { stage (\"Gradle Build\") { dir(appName) { sh \"\"\" echo ${microservice_name} pwd ls -ltr echo Building... source ~/.bash_profile gradle clean :${microservice_name}:bootJar \"\"\" } } } catch(e){ echo e.toString() currentBuild.result = \"FAILED\" } try { stage('Sonarqube Analysis') { dir(appName) { sh \"\"\" echo Executing Sonarqube Scan.... source ~/.bash_profile gradle :${microservice_name}:sonarqube \"\"\" } } } catch(e){ echo e.toString() currentBuild.result = \"FAILED\" } try { stage('SCP Build Artifact') { echo 'Transferring the build JAR file to a Test Server for deployment' sh \"\"\" cd ${workspaceDir} ssh -i ~/.ssh/id_rsa pk-jenkins@10.0.0.141 'mkdir -p /home/pk-jenkins/copiedJARS' scp -i ~/.ssh/id_rsa build/microservices/${microservice_name}/build/libs/${microservice_name}*.jar pk-jenkins@10.0.0.141:/home/pk-jenkins/copiedJARS echo '${microservice_name} jar file transferred' scp -i ~/.ssh/id_rsa build/deployJar.sh pk-jenkins@10.0.0.141:/home/pk-jenkins/scripts/ echo 'CM controlled deploy script transferred' \"\"\" } } catch(e){ echo e.toString() currentBuild.result = \"FAILED\" } try { stage('Deploy Build Artifact') { echo 'Deploying JAR...' sh \"\"\" ssh -i ~/.ssh/id_rsa pk-jenkins@10.0.0.141 \"sh /home/pk-jenkins/scripts/deployJar.sh /home/pk-jenkins/copiedJARS ${microservice_name}\" \"\"\" } } catch(e){ echo e.toString() currentBuild.result = \"FAILED\" } }","title":"build repo"},{"location":"build-repo-guide/#build-repo-docs","text":"","title":"build repo Docs"},{"location":"build-repo-guide/#dockerreadmemd","text":"This folder contains the resources for generating a ktis builder image. Build the image using: docker build -t ktis-builder . Create an output directory for the built jars to be placed, and run the container with the following command (filling in build_repo_directory and output_directory as needed): docker run --rm -it -v \"{{ build_repo_directory }}:/build\" -v \"{{ output_directory }}:/output\" ktis-builder","title":"docker/README.md"},{"location":"build-repo-guide/#jenkinsfile","text":"node(\"\"){ def workspaceDir = pwd() def appName = \"build\" def microservice_name = \"${env.MICROSERVICE}\" stage( \"Clean Workspace\" ) { if ( \"${CLEAN_WORKSPACE}\" == \"true\" ) step([ $class: 'WsCleanup' ]) } stage(\"Checkout\"){ dir(appName) { git branch: \"${BITBUCKET_BRANCH}\", credentialsId: \"${env.BITBUCKET_CREDS}\", url: \"${BITBUCKET_URL}/${appName}.git\" sh ''' echo Execute Clone Repo Script - Downloads ALL dependencies chmod +x clone.sh ./clone.sh echo CHECKOUT STAGE complete! ''' } } try { stage (\"Gradle Build\") { dir(appName) { sh \"\"\" echo ${microservice_name} pwd ls -ltr echo Building... source ~/.bash_profile gradle clean :${microservice_name}:bootJar \"\"\" } } } catch(e){ echo e.toString() currentBuild.result = \"FAILED\" } try { stage('Sonarqube Analysis') { dir(appName) { sh \"\"\" echo Executing Sonarqube Scan.... source ~/.bash_profile gradle :${microservice_name}:sonarqube \"\"\" } } } catch(e){ echo e.toString() currentBuild.result = \"FAILED\" } try { stage('SCP Build Artifact') { echo 'Transferring the build JAR file to a Test Server for deployment' sh \"\"\" cd ${workspaceDir} ssh -i ~/.ssh/id_rsa pk-jenkins@10.0.0.141 'mkdir -p /home/pk-jenkins/copiedJARS' scp -i ~/.ssh/id_rsa build/microservices/${microservice_name}/build/libs/${microservice_name}*.jar pk-jenkins@10.0.0.141:/home/pk-jenkins/copiedJARS echo '${microservice_name} jar file transferred' scp -i ~/.ssh/id_rsa build/deployJar.sh pk-jenkins@10.0.0.141:/home/pk-jenkins/scripts/ echo 'CM controlled deploy script transferred' \"\"\" } } catch(e){ echo e.toString() currentBuild.result = \"FAILED\" } try { stage('Deploy Build Artifact') { echo 'Deploying JAR...' sh \"\"\" ssh -i ~/.ssh/id_rsa pk-jenkins@10.0.0.141 \"sh /home/pk-jenkins/scripts/deployJar.sh /home/pk-jenkins/copiedJARS ${microservice_name}\" \"\"\" } } catch(e){ echo e.toString() currentBuild.result = \"FAILED\" } }","title":"Jenkinsfile"},{"location":"cesium-client-guide/","text":"cesium-client Docs","title":"cesium-client"},{"location":"cesium-client-guide/#cesium-client-docs","text":"","title":"cesium-client Docs"},{"location":"cesium-server-guide/","text":"cesium-server Docs","title":"cesium-server"},{"location":"cesium-server-guide/#cesium-server-docs","text":"","title":"cesium-server Docs"},{"location":"commonMS-guide/","text":"commonMS Docs","title":"commonMS"},{"location":"commonMS-guide/#commonms-docs","text":"","title":"commonMS Docs"},{"location":"configService-guide/","text":"configService Docs Dockerfile FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=configService.jar # Add the services configurations to the image: #ADD ../../services-config /blueground/services-config # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\" --spring.profiles.active=native --spring.cloud.config.server.native.searchLocations=file:///blueground/services-config","title":"configService"},{"location":"configService-guide/#configservice-docs","text":"","title":"configService Docs"},{"location":"configService-guide/#dockerfile","text":"FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=configService.jar # Add the services configurations to the image: #ADD ../../services-config /blueground/services-config # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\" --spring.profiles.active=native --spring.cloud.config.server.native.searchLocations=file:///blueground/services-config","title":"Dockerfile"},{"location":"copDM-guide/","text":"copDM Docs","title":"copDM"},{"location":"copDM-guide/#copdm-docs","text":"","title":"copDM Docs"},{"location":"csv2czml-guide/","text":"csv2czml Docs","title":"csv2czml"},{"location":"csv2czml-guide/#csv2czml-docs","text":"","title":"csv2czml Docs"},{"location":"czmlwriter-guide/","text":"czmlwriter Docs","title":"czmlwriter"},{"location":"czmlwriter-guide/#czmlwriter-docs","text":"","title":"czmlwriter Docs"},{"location":"discoveryService-guide/","text":"discoveryService Docs Dockerfile FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=discoveryService.jar # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"discoveryService"},{"location":"discoveryService-guide/#discoveryservice-docs","text":"","title":"discoveryService Docs"},{"location":"discoveryService-guide/#dockerfile","text":"FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=discoveryService.jar # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"Dockerfile"},{"location":"ephemerisDM-guide/","text":"ephemerisDM Docs Dockerfile #FROM openjdk:10.0.2-jre-slim FROM openjdk:10.0.2-jdk-oracle # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=ephemerisDM.jar # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"ephemerisDM"},{"location":"ephemerisDM-guide/#ephemerisdm-docs","text":"","title":"ephemerisDM Docs"},{"location":"ephemerisDM-guide/#dockerfile","text":"#FROM openjdk:10.0.2-jre-slim FROM openjdk:10.0.2-jdk-oracle # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=ephemerisDM.jar # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"Dockerfile"},{"location":"ephemerisMS-guide/","text":"ephemerisMS Docs Dockerfile FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=ephemerisMS.jar # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"ephemerisMS"},{"location":"ephemerisMS-guide/#ephemerisms-docs","text":"","title":"ephemerisMS Docs"},{"location":"ephemerisMS-guide/#dockerfile","text":"FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=ephemerisMS.jar # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"Dockerfile"},{"location":"ephemerisModel-guide/","text":"ephemerisModel Docs","title":"ephemerisModel"},{"location":"ephemerisModel-guide/#ephemerismodel-docs","text":"","title":"ephemerisModel Docs"},{"location":"ephemerisRepository-guide/","text":"ephemerisRepository Docs","title":"ephemerisRepository"},{"location":"ephemerisRepository-guide/#ephemerisrepository-docs","text":"","title":"ephemerisRepository Docs"},{"location":"geometricIntersectionMS-guide/","text":"geometricIntersectionMS Docs Dockerfile FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=geometricIntersectionMS.war # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"geometricIntersectionMS"},{"location":"geometricIntersectionMS-guide/#geometricintersectionms-docs","text":"","title":"geometricIntersectionMS Docs"},{"location":"geometricIntersectionMS-guide/#dockerfile","text":"FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=geometricIntersectionMS.war # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"Dockerfile"},{"location":"geometricIntersectionModel-guide/","text":"geometricIntersectionModel Docs","title":"geometricIntersectionModel"},{"location":"geometricIntersectionModel-guide/#geometricintersectionmodel-docs","text":"","title":"geometricIntersectionModel Docs"},{"location":"geometricIntersectionRepository-guide/","text":"geometricIntersectionRepository Docs","title":"geometricIntersectionRepository"},{"location":"geometricIntersectionRepository-guide/#geometricintersectionrepository-docs","text":"","title":"geometricIntersectionRepository Docs"},{"location":"geometryIngestService-guide/","text":"geometryIngestService Docs Dockerfile FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=geometryIngestService.war # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"geometryIngestService"},{"location":"geometryIngestService-guide/#geometryingestservice-docs","text":"","title":"geometryIngestService Docs"},{"location":"geometryIngestService-guide/#dockerfile","text":"FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=geometryIngestService.war # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"Dockerfile"},{"location":"initDatabase-guide/","text":"initDatabase Docs","title":"initDatabase"},{"location":"initDatabase-guide/#initdatabase-docs","text":"","title":"initDatabase Docs"},{"location":"managerMS-guide/","text":"managerMS Docs","title":"managerMS"},{"location":"managerMS-guide/#managerms-docs","text":"","title":"managerMS Docs"},{"location":"microserviceDBUtils-guide/","text":"microserviceDBUtils Docs","title":"microserviceDBUtils"},{"location":"microserviceDBUtils-guide/#microservicedbutils-docs","text":"","title":"microserviceDBUtils Docs"},{"location":"missionMS-guide/","text":"missionMS Docs Dockerfile FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=missionMS.war # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"missionMS"},{"location":"missionMS-guide/#missionms-docs","text":"","title":"missionMS Docs"},{"location":"missionMS-guide/#dockerfile","text":"FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=missionMS.war # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"Dockerfile"},{"location":"missionModel-guide/","text":"missionModel Docs","title":"missionModel"},{"location":"missionModel-guide/#missionmodel-docs","text":"","title":"missionModel Docs"},{"location":"missionRepository-guide/","text":"missionRepository Docs","title":"missionRepository"},{"location":"missionRepository-guide/#missionrepository-docs","text":"","title":"missionRepository Docs"},{"location":"opGenCommon-guide/","text":"opGenCommon Docs","title":"opGenCommon"},{"location":"opGenCommon-guide/#opgencommon-docs","text":"","title":"opGenCommon Docs"},{"location":"opGenModel-guide/","text":"opGenModel Docs","title":"opGenModel"},{"location":"opGenModel-guide/#opgenmodel-docs","text":"","title":"opGenModel Docs"},{"location":"opGenService-guide/","text":"opGenService Docs Dockerfile FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=opGenService.jar # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"opGenService"},{"location":"opGenService-guide/#opgenservice-docs","text":"","title":"opGenService Docs"},{"location":"opGenService-guide/#dockerfile","text":"FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=opGenService.jar # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"Dockerfile"},{"location":"planningMS-guide/","text":"planningMS Docs Dockerfile FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=planningMS.jar # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"planningMS"},{"location":"planningMS-guide/#planningms-docs","text":"","title":"planningMS Docs"},{"location":"planningMS-guide/#dockerfile","text":"FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=planningMS.jar # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"Dockerfile"},{"location":"planningModel-guide/","text":"planningModel Docs","title":"planningModel"},{"location":"planningModel-guide/#planningmodel-docs","text":"","title":"planningModel Docs"},{"location":"planningRepository-guide/","text":"planningRepository Docs","title":"planningRepository"},{"location":"planningRepository-guide/#planningrepository-docs","text":"","title":"planningRepository Docs"},{"location":"swaggerCommon-guide/","text":"swaggerCommon Docs","title":"swaggerCommon"},{"location":"swaggerCommon-guide/#swaggercommon-docs","text":"","title":"swaggerCommon Docs"},{"location":"targetMS-guide/","text":"targetMS Docs Dockerfile FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=targetMS.jar # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"targetMS"},{"location":"targetMS-guide/#targetms-docs","text":"","title":"targetMS Docs"},{"location":"targetMS-guide/#dockerfile","text":"FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=targetMS.jar # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"Dockerfile"},{"location":"targetModel-guide/","text":"targetModel Docs","title":"targetModel"},{"location":"targetModel-guide/#targetmodel-docs","text":"","title":"targetModel Docs"},{"location":"targetRepository-guide/","text":"targetRepository Docs","title":"targetRepository"},{"location":"targetRepository-guide/#targetrepository-docs","text":"","title":"targetRepository Docs"},{"location":"terrainMS-guide/","text":"terrainMS Docs Dockerfile ## Use the following section if getting the DTED data from a zip file and storing it in the image. ## If using a directory structure comment out all of these lines. ## Do not change the source image! It can't be a slim; those use a different package manager. #FROM openjdk:10.0.2-jdk-oracle as extract ## Get unzip in the temporary image: #RUN [\"yum\",\"--assumeyes\",\"--quiet\",\"install\",\"unzip\"] #ADD ./build/libs/dted.zip /blueground/DTED0/dted.zip ## Extract the dted data: #RUN [\"unzip\",\"-d\",\"/blueground/DTED0\",\"-qq\",\"/blueground/DTED0/dted.zip\"] ## Cleanup; don't need the zip file: #RUN [\"rm\",\"/blueground/DTED0/dted.zip\"] ## End of zip file section FROM openjdk:10.0.2-jre-slim # Uncomment the following line out if getting DTED from a zip file. #COPY --from=extract /blueground/DTED0 /blueground/DTED0 # Uncomment the following line if using a directory structure for DTED data. #ADD ./build/libs/DTED /blueground/DTED0/DTED # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=terrainMS.jar # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"terrainMS"},{"location":"terrainMS-guide/#terrainms-docs","text":"","title":"terrainMS Docs"},{"location":"terrainMS-guide/#dockerfile","text":"## Use the following section if getting the DTED data from a zip file and storing it in the image. ## If using a directory structure comment out all of these lines. ## Do not change the source image! It can't be a slim; those use a different package manager. #FROM openjdk:10.0.2-jdk-oracle as extract ## Get unzip in the temporary image: #RUN [\"yum\",\"--assumeyes\",\"--quiet\",\"install\",\"unzip\"] #ADD ./build/libs/dted.zip /blueground/DTED0/dted.zip ## Extract the dted data: #RUN [\"unzip\",\"-d\",\"/blueground/DTED0\",\"-qq\",\"/blueground/DTED0/dted.zip\"] ## Cleanup; don't need the zip file: #RUN [\"rm\",\"/blueground/DTED0/dted.zip\"] ## End of zip file section FROM openjdk:10.0.2-jre-slim # Uncomment the following line out if getting DTED from a zip file. #COPY --from=extract /blueground/DTED0 /blueground/DTED0 # Uncomment the following line if using a directory structure for DTED data. #ADD ./build/libs/DTED /blueground/DTED0/DTED # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=terrainMS.jar # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"Dockerfile"},{"location":"terrainModel-guide/","text":"terrainModel Docs","title":"terrainModel"},{"location":"terrainModel-guide/#terrainmodel-docs","text":"","title":"terrainModel Docs"},{"location":"userModel-guide/","text":"userModel Docs","title":"userModel"},{"location":"userModel-guide/#usermodel-docs","text":"","title":"userModel Docs"},{"location":"userRepository-guide/","text":"userRepository Docs","title":"userRepository"},{"location":"userRepository-guide/#userrepository-docs","text":"","title":"userRepository Docs"},{"location":"userService-guide/","text":"userService Docs Dockerfile FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=userService.war # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"userService"},{"location":"userService-guide/#userservice-docs","text":"","title":"userService Docs"},{"location":"userService-guide/#dockerfile","text":"FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=userService.war # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"Dockerfile"},{"location":"weatherDM-guide/","text":"weatherDM Docs","title":"weatherDM"},{"location":"weatherDM-guide/#weatherdm-docs","text":"","title":"weatherDM Docs"},{"location":"weatherMS-guide/","text":"weatherMS Docs Dockerfile FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=weatherMS.jar # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"weatherMS"},{"location":"weatherMS-guide/#weatherms-docs","text":"","title":"weatherMS Docs"},{"location":"weatherMS-guide/#dockerfile","text":"FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=weatherMS.jar # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"Dockerfile"},{"location":"weatherModel-guide/","text":"weatherModel Docs","title":"weatherModel"},{"location":"weatherModel-guide/#weathermodel-docs","text":"","title":"weatherModel Docs"},{"location":"weatherParser-guide/","text":"weatherParser Docs","title":"weatherParser"},{"location":"weatherParser-guide/#weatherparser-docs","text":"","title":"weatherParser Docs"},{"location":"weatherRepository-guide/","text":"weatherRepository Docs","title":"weatherRepository"},{"location":"weatherRepository-guide/#weatherrepository-docs","text":"","title":"weatherRepository Docs"},{"location":"webstats-guide/","text":"webstats Docs","title":"webstats"},{"location":"webstats-guide/#webstats-docs","text":"","title":"webstats Docs"},{"location":"workflowMS-guide/","text":"workflowMS Docs Dockerfile FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=workflowMS.jar # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"workflowMS"},{"location":"workflowMS-guide/#workflowms-docs","text":"","title":"workflowMS Docs"},{"location":"workflowMS-guide/#dockerfile","text":"FROM openjdk:10.0.2-jre-slim # Pass in a different name, such as the latest build + build version, as SOURCE_JAR to override this. ARG SOURCE_JAR=workflowMS.jar # Add the microservice runable to the image: ADD ./build/libs/${SOURCE_JAR} ${SOURCE_JAR} # Set the default entry point to run the microservice using java: ENV SOURCE_JAR=${SOURCE_JAR} ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar \"${SOURCE_JAR}\"","title":"Dockerfile"},{"location":"workflowModel-guide/","text":"workflowModel Docs","title":"workflowModel"},{"location":"workflowModel-guide/#workflowmodel-docs","text":"","title":"workflowModel Docs"},{"location":"build/","text":"Blueground Build Repository This file serves as a build file for all Blueground libraries and applications. Clone these repositories To clone these repositories, create a directory and run the following: git clone git@bitbucket.org:radiantsolutions/build.git cd build ./clone.sh That's it. All necessary repos will be cloned in the right place. Eclipse Setup To set up Eclipse, do the following: Create a new workspace Show the 'Git Repositories' view Add all of the Blueground repositories Add the build, common, managers, webapps, and webservices projects by right-clicking each repo and importing the projects. It is recommended to use Eclipse 'working sets' to keep them organized. Project Structure Your 'projects' directory should look similar to this: Projects | .git | common | dependency | documents | libraries | managers | plugins | rb-analytics | repo | tools | webapps | webservices | .gitignore | build.gradle | clone.sh | README.md | settings.gradle Building applications WARs will be located in PROJECT/build/libs To build a single application from the root directory: gradle clean :asm:build gradle clean :MANAGERNAME:build To build all applications: gradle clean build You can also step into a directory to build an application. From webapps/asm (to build ASM) or managers/ (to build all managers): gradle clean build Adding Dependencies Note : Please be sure to talk with the team before introducing a new dependency. We have to fill out security paperwork for any new dependency. To introduce a new dependency: Open up dependency/pom.xml Add your dependency From the dependency directory, run mvn dependency:resolve ** This will download the dependency to repo Commit and push the new dependency Add the dependency to your project's build.gradle file","title":"Blueground Build Repository"},{"location":"build/#blueground-build-repository","text":"This file serves as a build file for all Blueground libraries and applications.","title":"Blueground Build Repository"},{"location":"build/#clone-these-repositories","text":"To clone these repositories, create a directory and run the following: git clone git@bitbucket.org:radiantsolutions/build.git cd build ./clone.sh That's it. All necessary repos will be cloned in the right place.","title":"Clone these repositories"},{"location":"build/#eclipse-setup","text":"To set up Eclipse, do the following: Create a new workspace Show the 'Git Repositories' view Add all of the Blueground repositories Add the build, common, managers, webapps, and webservices projects by right-clicking each repo and importing the projects. It is recommended to use Eclipse 'working sets' to keep them organized.","title":"Eclipse Setup"},{"location":"build/#project-structure","text":"Your 'projects' directory should look similar to this: Projects | .git | common | dependency | documents | libraries | managers | plugins | rb-analytics | repo | tools | webapps | webservices | .gitignore | build.gradle | clone.sh | README.md | settings.gradle","title":"Project Structure"},{"location":"build/#building-applications","text":"WARs will be located in PROJECT/build/libs To build a single application from the root directory: gradle clean :asm:build gradle clean :MANAGERNAME:build To build all applications: gradle clean build You can also step into a directory to build an application. From webapps/asm (to build ASM) or managers/ (to build all managers): gradle clean build","title":"Building applications"},{"location":"build/#adding-dependencies","text":"Note : Please be sure to talk with the team before introducing a new dependency. We have to fill out security paperwork for any new dependency. To introduce a new dependency: Open up dependency/pom.xml Add your dependency From the dependency directory, run mvn dependency:resolve ** This will download the dependency to repo Commit and push the new dependency Add the dependency to your project's build.gradle file","title":"Adding Dependencies"},{"location":"build/docker/","text":"This folder contains the resources for generating a ktis builder image. Build the image using: docker build -t ktis-builder . Create an output directory for the built jars to be placed, and run the container with the following command (filling in build_repo_directory and output_directory as needed): docker run --rm -it -v \"{{ build_repo_directory }}:/build\" -v \"{{ output_directory }}:/output\" ktis-builder","title":"Home"},{"location":"cesium-ui/cesium-client/","text":"CesiumClient This project was generated with Angular CLI version 7.2.1. Development server Run ng serve for a dev server. Navigate to http://localhost:4200/ . The app will automatically reload if you change any of the source files. Code scaffolding Run ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module . Build Run ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build. Running unit tests Run ng test to execute the unit tests via Karma . Running end-to-end tests Run ng e2e to execute the end-to-end tests via Protractor . Further help To get more help on the Angular CLI use ng help or go check out the Angular CLI README .","title":"CesiumClient"},{"location":"cesium-ui/cesium-client/#cesiumclient","text":"This project was generated with Angular CLI version 7.2.1.","title":"CesiumClient"},{"location":"cesium-ui/cesium-client/#development-server","text":"Run ng serve for a dev server. Navigate to http://localhost:4200/ . The app will automatically reload if you change any of the source files.","title":"Development server"},{"location":"cesium-ui/cesium-client/#code-scaffolding","text":"Run ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module .","title":"Code scaffolding"},{"location":"cesium-ui/cesium-client/#build","text":"Run ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.","title":"Build"},{"location":"cesium-ui/cesium-client/#running-unit-tests","text":"Run ng test to execute the unit tests via Karma .","title":"Running unit tests"},{"location":"cesium-ui/cesium-client/#running-end-to-end-tests","text":"Run ng e2e to execute the end-to-end tests via Protractor .","title":"Running end-to-end tests"},{"location":"cesium-ui/cesium-client/#further-help","text":"To get more help on the Angular CLI use ng help or go check out the Angular CLI README .","title":"Further help"},{"location":"cesium-ui/cesium-client/src/assets/fonts/material-icons/","text":"The recommended way to use the Material Icons font is by linking to the web font hosted on Google Fonts: <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\"> Read more in our full usage guide: http://google.github.io/material-design-icons/#icon-font-for-the-web","title":"Home"},{"location":"tools/","text":"Blueground Tools This project contains tools for the Blueground projects. Formatters Code formatters for Eclipse Scripts Helper scripts for cloning, building, etc. SDKs GWT 2.4.0 - https://google-web-toolkit.googlecode.com/files/gwt-2.4.0.zip 2.5.1 - https://google-web-toolkit.googlecode.com/files/gwt-2.5.1.zip 2.6.0 - https://google-web-toolkit.googlecode.com/files/gwt-2.6.0.zip","title":"Blueground Tools #"},{"location":"tools/#blueground-tools","text":"This project contains tools for the Blueground projects.","title":"Blueground Tools"},{"location":"tools/#formatters","text":"Code formatters for Eclipse","title":"Formatters"},{"location":"tools/#scripts","text":"Helper scripts for cloning, building, etc.","title":"Scripts"},{"location":"tools/#sdks","text":"","title":"SDKs"},{"location":"tools/#gwt","text":"2.4.0 - https://google-web-toolkit.googlecode.com/files/gwt-2.4.0.zip 2.5.1 - https://google-web-toolkit.googlecode.com/files/gwt-2.5.1.zip 2.6.0 - https://google-web-toolkit.googlecode.com/files/gwt-2.6.0.zip","title":"GWT"}]}