
buildscript {
  ext {
    grailsVersion = ""
    hasJar={false}
    baseImage = "omar-base"
    dockerFile="docker/Dockerfile"
/*  copyFile "docs.conf", "/etc/httpd/conf.d/docs.conf"
  copyFile "rhel-deps.repo", "/etc/yum.repos.d/rhel-deps.repo"
  runCommand "yum -y install hostname httpd mod_ssl wget curl&& yum clean all"
  copyFile "docs.tgz", "/var/www/html/"
  copyFile "run-httpd.sh", "/run-httpd.sh"
  workingDir "/var/www/html"
  runCommand "tar xfz docs.tgz"
  runCommand "mv ./site/* ."
  runCommand "rm -rf site docs.tgz"
  runCommand "chmod -v +x /run-httpd.sh"
  exposePort 80, 443
  defaultCommand "/run-httpd.sh"
*/
    dockerStatementsOverride = {
       [
          "FROM ${project.dockerNamespaceUrl}${project.ext.baseImage}:${project.dockerAppTag}",

          "MAINTAINER DigitalGlobe-RadiantBlue",
          """LABEL com.digitalglobe.version="" """,
          "USER root",
          """RUN mkdir -p \$HOME && \
                 yum --disablerepo=centos* -y install hostname httpd gettext && \
                 yum -y install nss_wrapper mod_ssl && yum clean all && \
                 useradd -u 1001 -r -g 0 -d \$HOME -s /sbin/nologin \
                      -c "Default Application User" omar && \
                      sed '/^omar/d' /etc/passwd >\$HOME/passwd-template && \
                      setcap cap_net_bind_service+ep /usr/sbin/httpd && \
                      setcap cap_net_bind_service+ep /usr/sbin/apachectl""",
          "COPY docs.conf /etc/httpd/conf.d/docs.conf",
          "COPY docs.tgz /var/www/html/",
          "WORKDIR  /var/www/html",
          "RUN tar xfz docs.tgz && \
               mv ./site/* . &&\
               rm -rf site docs.tgz"
          "ADD run-httpd.sh \$HOME/run-httpd.sh",
          """RUN chmod -v +x \$HOME/run-httpd.sh && \
              chmod 770 /usr/share/httpd && \
              chmod 770 /var/run/httpd && \
              chown 1001:0 /run/httpd && \
              chown 1001:0 /var/log/httpd && \
              chmod 770 /var/log/httpd && \
              chmod g+s /var/run/httpd && \
              find /usr/share/httpd -type d -exec chmod g+xws {} \\; && \
              find /usr/share/httpd -type f -exec chmod g+rw {} \\; && \
              find /etc/httpd -type d -exec chmod g+rw {} \\; && \
              find /etc/pki -type d -exec chmod g+xws {} \\; && \
              find /etc/pki -type f -exec chmod g+rw {} \\; && \
              chown -R 1001:0 /usr/share/httpd && \
              chown -R 1001:0 /etc/httpd && \
              chown -R 1001:0 /etc/pki && \
              find \$HOME -type d -exec chmod g+xws {} \\; && \
              find \$HOME -type f -exec chmod g+rw {} \\; && \
              chown -R 1001:0 \$HOME && \
              chmod 770 \$HOME/*.sh && \
              chown -R 1001:0 \$HOME""",
          "VOLUME /dev/random /home",
          "EXPOSE 80 443",
          "WORKDIR \$HOME",
          "USER 1001",
          "CMD ./run-httpd.sh"

       ]
     }
  }
  if(System.env.OMAR_COMMON_PROPERTIES)
  {
    apply from: System.env.OMAR_COMMON_PROPERTIES
  }
  repositories {
    mavenLocal()
    maven { url "${ossimMavenProxy}" }
  }
  dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
  }
}
apply plugin: "java"
apply plugin: "maven-publish"
apply plugin: "maven"

group "io.ossim.omar.apps"


repositories {
  mavenLocal()
  maven { url "${ossimMavenProxy}" }
  mavenCentral()
}

dependencies {
  compile 'org.codehaus.groovy:groovy-all:2.4.7'
  compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
  compile 'org.postgresql:postgresql:9.4-1205-jdbc42'
}


publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}


